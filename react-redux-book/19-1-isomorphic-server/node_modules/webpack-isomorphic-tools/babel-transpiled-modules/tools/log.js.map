{"version":3,"sources":["../../source/tools/log.js"],"names":["Log","preamble","options","parameters","console","log","generate_log_message","debug","gray","yellow","red","map","argument","Error","stack","toString","reduce","message","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqBA,G;AAEpB,cAAYC,QAAZ,EAAsBC,OAAtB,EACA;AAAA;;AACC,OAAKA,OAAL,GAAeA,OAAf;;AAEA;AACA,OAAKD,QAAL,SAAoBA,QAApB;AACA;;AAED;;;;;yBAEA;AAAA,qCADQE,UACR;AADQA,cACR;AAAA;;AACCC,WAAQC,GAAR,CAAY,KAAKJ,QAAjB,EAA2BK,qBAAqBH,UAArB,CAA3B;AACA;;AAED;;;;0BAEA;AACC,OAAI,KAAKD,OAAL,CAAaK,KAAjB,EACA;AAAA,uCAHQJ,UAGR;AAHQA,eAGR;AAAA;;AACCC,YAAQC,GAAR,CAAY,KAAKJ,QAAjB,EAA2B,SAA3B,EAAsCK,qBAAqBH,UAArB,CAAtC;AACA;AACD;;AAED;;;;0BAEA;AACC,OAAI,KAAKD,OAAL,CAAaK,KAAjB,EACA;AAAA,uCAHQJ,UAGR;AAHQA,eAGR;AAAA;;AACCC,YAAQC,GAAR,CAAY,eAAOG,IAAP,CAAY,KAAKP,QAAjB,EAA2B,SAA3B,EAAsCK,qBAAqBH,UAArB,CAAtC,CAAZ;AACA;AACD;;AAED;;;;4BAEA;AAAA,sCADWA,UACX;AADWA,cACX;AAAA;;AACCC,WAAQC,GAAR,CAAY,eAAOI,MAAP,CAAc,KAAKR,QAAnB,EAA6B,WAA7B,EAA0CK,qBAAqBH,UAArB,CAA1C,CAAZ;AACA;;AAED;;;;0BAEA;AAAA,sCADSA,UACT;AADSA,cACT;AAAA;;AACCC,WAAQC,GAAR,CAAY,eAAOK,GAAP,CAAW,KAAKT,QAAhB,EAA0B,SAA1B,EAAqCK,qBAAqBH,UAArB,CAArC,CAAZ;AACA;;;;;AAGF;;;kBA/CqBH,G;AAgDrB,SAASM,oBAAT,CAA8BH,UAA9B,EACA;AACC;AACA,QAAOA,WAAWQ,GAAX,CAAe,oBACtB;AACC;AACA,MAAI,QAAOC,QAAP,uDAAOA,QAAP,OAAoB,QAAxB,EACA;AACC;AACA,OAAIA,oBAAoBC,KAAxB,EACA;AACC,WAAOD,SAASE,KAAhB;AACA;AACD;AACA,UAAO,yBAAeF,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAP;AACA;AACD;AACA,MAAI,OAAOA,QAAP,KAAoB,WAAxB,EACA;AACC,UAAO,aAAP;AACA;AACD;AACA,SAAOA,SAASG,QAAT,EAAP;AACA,EApBM;AAqBP;AArBO,EAsBNC,MAtBM,CAsBC,UAACC,OAAD,EAAUL,QAAV,EACR;AACC,MAAIK,QAAQC,MAAR,GAAiB,CAArB,EACA;AACCD,cAAW,GAAX;AACA;AACD,SAAOA,UAAUL,QAAjB;AACA,EA7BM,EA8BP,EA9BO,CAAP;AA+BA","file":"log.js","sourcesContent":["import colors from 'colors/safe'\r\n\r\nexport default class Log\r\n{\r\n\tconstructor(preamble, options)\r\n\t{\r\n\t\tthis.options = options\r\n\r\n\t\t// is prepended to console output\r\n\t\tthis.preamble = `[${preamble}]`\r\n\t}\r\n\r\n\t// outputs info to the log\r\n\tinfo(...parameters)\r\n\t{\r\n\t\tconsole.log(this.preamble, generate_log_message(parameters))\r\n\t}\r\n\r\n\t// outputs debugging info to the log\r\n\tdebug(...parameters)\r\n\t{\r\n\t\tif (this.options.debug)\r\n\t\t{\r\n\t\t\tconsole.log(this.preamble, '[debug]', generate_log_message(parameters))\r\n\t\t}\r\n\t}\r\n\r\n\t// outputs minor debugging info to the log\r\n\ttrace(...parameters)\r\n\t{\r\n\t\tif (this.options.debug)\r\n\t\t{\r\n\t\t\tconsole.log(colors.gray(this.preamble, '[trace]', generate_log_message(parameters)))\r\n\t\t}\r\n\t}\r\n\r\n\t// outputs a warning to the log\r\n\twarning(...parameters)\r\n\t{\r\n\t\tconsole.log(colors.yellow(this.preamble, '[warning]', generate_log_message(parameters)))\r\n\t}\r\n\r\n\t// outputs an error to the log\r\n\terror(...parameters)\r\n\t{\r\n\t\tconsole.log(colors.red(this.preamble, '[error]', generate_log_message(parameters)))\r\n\t}\r\n}\r\n\r\n// transforms arguments to text\r\nfunction generate_log_message(parameters)\r\n{\r\n\t// преобразовать все аргументы функции в текстовый вид\r\n\treturn parameters.map(argument =>\r\n\t{\r\n\t\t// преобразование объектов в строку\r\n\t\tif (typeof argument === 'object')\r\n\t\t{\r\n\t\t\t// для ошибок - распечатывать стек вызовов\r\n\t\t\tif (argument instanceof Error)\r\n\t\t\t{\r\n\t\t\t\treturn argument.stack\r\n\t\t\t}\r\n\t\t\t// для остальных объектов вызывать JSON.stringify()\r\n\t\t\treturn JSON.stringify(argument, null, 2)\r\n\t\t}\r\n\t\t// если undefined\r\n\t\tif (typeof argument === 'undefined')\r\n\t\t{\r\n\t\t\treturn '[undefined]'\r\n\t\t}\r\n\t\t// прочие переменные - просто .toString()\r\n\t\treturn argument.toString()\r\n\t})\r\n\t// собрать всё это в одну строку через пробел\r\n\t.reduce((message, argument) =>\r\n\t{\r\n\t\tif (message.length > 0)\r\n\t\t{\r\n\t\t\tmessage += ' '\r\n\t\t}\r\n\t\treturn message + argument\r\n\t},\r\n\t'')\r\n}"]}