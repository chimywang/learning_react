{"version":3,"sources":["../source/require hacker.js"],"names":[],"mappings":"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","file":"require hacker.js","sourcesContent":["// Hacking too much time\n\n// Based on Node.js Module class sources:\n// https://github.com/nodejs/node/blob/master/lib/module.js\n\nimport fs     from 'fs'\nimport path   from 'path'\nimport Module from 'module'\n\nimport Log from './tools/log'\nimport { exists, starts_with, ends_with } from './helpers'\n\nimport serialize from './tools/serialize-javascript'\n\nconst require_hacker = \n{\n\tpreceding_path_resolvers: [],\n\tpath_resolvers: [],\n\n\tglobal_hook_resolved_modules: {},\n\n\tglobal_hooks_enabled: true,\n\n\toccupied_file_extensions: new Set(),\n\n\t// logging\n\tlog: new Log('require-hacker', { debug: false }), // this.options.debug\n\n\t// installs a require() path resolver \n\t//\n\t// resolve - a function which takes two parameters:\n\t//\n\t//             the path to be resolved\n\t//             the module in which the require() call was originated\n\t//\n\t//           must return either a new path to the require()d module\n\t//           or it can return nothing to fall back to the original require()d module path\n\t//\n\t// returns an object with an .unmount() method\n\t//\n\tresolver(resolve)\n\t{\n\t\tvalidate.resolve(resolve)\n\n\t\tconst resolver = (path, module) =>\n\t\t{\n\t\t\t// resolve the path for this require() call\n\t\t\tconst resolved_path = resolve(path, module)\n\t\t\t\n\t\t\t// if no path was resolved - do nothing\n\t\t\tif (!exists(resolved_path))\n\t\t\t{\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// return the path to be require()d \n\t\t\treturn resolved_path\n\t\t}\n\n\t\trequire_hacker.preceding_path_resolvers.push(resolver)\n\n\t\tconst result =\n\t\t{\n\t\t\tunmount: () =>\n\t\t\t{\n\t\t\t\t// javascript arrays still have no .remove() method in the XXI-st century\n\t\t\t\trequire_hacker.preceding_path_resolvers = require_hacker.preceding_path_resolvers.filter(x => x !== resolver)\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t},\n\n\t// installs a global require() hook for all paths \n\t//\n\t// (if these paths are certain to exist in the filesystem\n\t//  and if you need only a specific file extension\n\t//  then use the .hook(extension, resolve) method instead)\n\t//\n\t// id - a meaningful textual identifier\n\t//\n\t// resolve - a function which takes two parameters:\n\t//\n\t//             the path to be resolved\n\t//             the module in which the require() call was originated\n\t//\n\t//           must return either a javascript CommonJS module source code\n\t//           (i.e. \"module.exports = ...\", etc)\n\t//           or it can return nothing to fall back to the original Node.js loader\n\t//\n\t// returns an object with an .unmount() method\n\t//\n\t// options:\n\t//\n\t//   precede_node_loader:\n\t//     \n\t//     true  - this require() hook will intercept all require() calls\n\t//             before they go into the original Node.js loader\n\t//    \n\t//     false - this require() hook will only intercept those require() calls\n\t//             which failed to be resolved by the original Node.js loader\n\t//\n\t//     default value: true\n\t//\n\tglobal_hook(id, resolve, options = {})\n\t{\n\t\tvalidate.global_hook(id, resolve)\n\n\t\tconst resolver = (path, module) =>\n\t\t{\n\t\t\t// log.debug(`Global require() hook \"${id}\" fired`)\n\n\t\t\t// get CommonJS module source code for this require() call\n\t\t\tconst source = resolve(path, module)\n\t\t\t\n\t\t\t// if no CommonJS module source code returned - skip this require() hook\n\t\t\tif (!exists(source))\n\t\t\t{\n\t\t\t\treturn\n\t\t\t}\n\t\t\t\n\t\t\t// CommonJS module source code returned, \n\t\t\t// so put it into a hash for a corresponding key\n\n\t\t\tconst resolved_path = `${path}.${id}`\n\t\t\t\n\t\t\t// flush require() cache\n\t\t\tdelete require.cache[resolved_path]\n\n\t\t\t// put the CommonJS module source code into the hash\n\t\t\trequire_hacker.global_hook_resolved_modules[resolved_path] = source\n\n\t\t\t// return the path to be require()d \n\t\t\t// in order to get the CommonJS module source code\n\t\t\treturn resolved_path\n\t\t}\n\n\t\tif (options.precede_node_loader === false)\n\t\t{\n\t\t\trequire_hacker.path_resolvers.push(resolver)\n\t\t}\n\t\telse\n\t\t{\n\t\t\trequire_hacker.preceding_path_resolvers.push(resolver)\n\t\t}\n\n\t\tconst hook = this.hook(id, path => \n\t\t{\n\t\t\tconst source = require_hacker.global_hook_resolved_modules[path]\n\t\t\tdelete require_hacker.global_hook_resolved_modules[path]\n\t\t\treturn source\n\t\t})\n\n\t\tconst result =\n\t\t{\n\t\t\tunmount: () =>\n\t\t\t{\n\t\t\t\t// javascript arrays still have no .remove() method in the XXI-st century\n\t\t\t\trequire_hacker.preceding_path_resolvers = require_hacker.preceding_path_resolvers.filter(x => x !== resolver)\n\t\t\t\trequire_hacker.path_resolvers = require_hacker.path_resolvers.filter(x => x !== resolver)\n\t\t\t\thook.unmount()\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t},\n\n\t// installs a require() hook for the extension\n\t//\n\t// extension - a file extension to hook into require()s of\n\t//             (examples: 'css', 'jpg', 'js')\n\t//\n\t// resolve   - a function that takes two parameters: \n\t//\n\t//               the path requested in the require() call \n\t//               the module in which the require() call was originated\n\t//\n\t//             must return either a javascript CommonJS module source code\n\t//             (i.e. \"module.exports = ...\", etc)\n\t//             or it can return nothing to fall back to the original Node.js loader\n\t//\n\thook(extension, resolve)\n\t{\n\t\tthis.log.debug(`Hooking into *.${extension} files loading`)\n\t\t\n\t\t// validation\n\t\tvalidate.extension(extension)\n\t\tvalidate.resolve(resolve)\n\n\t\t// occupy file extension\n\t\tthis.occupied_file_extensions.add(extension)\n\n\t\t// dotted extension\n\t\tconst dot_extension = `.${extension}`\n\n\t\t// keep original extension loader\n\t\tconst original_loader = Module._extensions[dot_extension]\n\n\t\t// display a warning in case of extension loader override\n\t\tif (original_loader)\n\t\t{\n\t\t\t// output a debug message in case of extension loader override,\n\t\t\t// not a warning, so that it doesn't scare people\n\t\t\tthis.log.debug(`-----------------------------------------------`)\n\t\t\tthis.log.debug(`Overriding an already existing require() hook `)\n\t\t\tthis.log.debug(`for file extension ${dot_extension}`)\n\t\t\tthis.log.debug(`-----------------------------------------------`)\n\t\t}\n\n\t\t// the list of cached modules\n\t\tconst cached_modules = new Set()\n\n\t\t// Node.js inner API check\n\t\t/* istanbul ignore if */\n\t\tif (!Module._extensions)\n\t\t{\n\t\t\tthrow new Error('Incompatilbe Node.js version detected: \"Module._extensions\" array is missing. File an issue on GitHub.')\n\t\t}\n\n\t\t// set new loader for this extension\n\t\tModule._extensions[dot_extension] = (module, filename) =>\n\t\t{\n\t\t\tthis.log.debug(`require() hook fired for ${filename}`)\n\n\t\t\t// var source = fs.readFileSync(filename, 'utf8')\n\t\t\tconst source = resolve(filename, module)\n\n\t\t\tif (!exists(source))\n\t\t\t{\n\t\t\t\tthis.log.debug(`Fallback to original loader`)\n\n\t\t\t\t// this message would appear if there was no loader \n\t\t\t\t// for the extension of the filename\n\t\t\t\tif (path.extname(filename) !== dot_extension)\n\t\t\t\t{\n\t\t\t\t\tthis.log.info(`Trying to load \"${path.basename(filename)}\" as a \"*${dot_extension}\"`)\n\t\t\t\t}\n\n\t\t\t\t// load the file with the original loader\n\t\t\t\treturn (original_loader || Module._extensions['.js'])(module, filename)\n\t\t\t}\n\n\t\t\t// add this file path to the list of cached modules\n\t\t\tcached_modules.add(filename)\n\n\t\t\t// Node.js inner API check\n\t\t\t/* istanbul ignore if */\n\t\t\tif (!module._compile)\n\t\t\t{\n\t\t\t\tthrow new Error('Incompatilbe Node.js version detected: \"Module.prototype._compile\" function is missing. File an issue on GitHub.')\n\t\t\t}\n\n\t\t\t// compile javascript module from its source\n\t\t\t// https://github.com/nodejs/node/blob/master/lib/module.js#L379\n\t\t\tmodule._compile(source, filename)\n\t\t}\n\n\t\tconst result = \n\t\t{\n\t\t\t// uninstall the hook\n\t\t\tunmount: () =>\n\t\t\t{\n\t\t\t\t// clear require() cache for this file extension\n\t\t\t\tfor (let path of cached_modules)\n\t\t\t\t{\n\t\t\t\t\tdelete require.cache[path]\n\t\t\t\t}\n\n\t\t\t\t// mount the original loader for this file extension\n\t\t\t\tModule._extensions[dot_extension] = original_loader\n\n\t\t\t\t// free file extension\n\t\t\t\tthis.occupied_file_extensions.delete(extension)\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t},\n\n\t// returns a CommonJS modules source.\n\tto_javascript_module_source(anything)\n\t{\n\t\t// if the asset source wasn't found - return an empty CommonJS module\n\t\tif (!exists(anything))\n\t\t{\n\t\t\treturn 'module.exports = undefined'\n\t\t}\n\n\t\t// if it's already a common js module source\n\t\tif (typeof anything === 'string' && is_a_module_declaration(anything))\n\t\t{\n\t\t\treturn anything\n\t\t}\n\n\t\t// generate javascript module source code based on the `source` variable\n\t\treturn 'module.exports = ' + serialize(anything)\n\t},\n\n\t// resolves a requireable `path` to a real filesystem path relative to the `module`\n\t// (resolves `npm link`, etc)\n\tresolve(path_to_resolve, module)\n\t{\n\t\t// Module._resolveFilename existence check is perfomed outside of this method\n\t\ttry\n\t\t{\n\t\t\trequire_hacker.global_hooks_enabled = false\n\t\t\treturn original_resolveFilename(path_to_resolve, module)\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\trequire_hacker.global_hooks_enabled = true\n\t\t}\n\t}\n}\n\n// validation\nconst validate =\n{\n\textension(extension)\n\t{\n\t\t// if (typeof extension !== 'string')\n\t\t// {\n\t\t// \tthrow new Error(`Expected string extension. Got ${extension}`)\n\t\t// }\n\n\t\tif (path.extname(`test.${extension}`) !== `.${extension}`)\n\t\t{\n\t\t\tthrow new Error(`Invalid file extension \"${extension}\"`)\n\t\t}\n\n\t\t// check if the file extension is already occupied\n\t\tif (require_hacker.occupied_file_extensions.has(extension))\n\t\t{\n\t\t\tthrow new Error(`File extension \"${extension}\" is already occupied by require-hacker`)\n\t\t}\n\t},\n\n\tresolve(resolve)\n\t{\n\t\tif (typeof resolve !== 'function')\n\t\t{\n\t\t\tthrow new Error(`Resolve should be a function. Got \"${resolve}\"`)\n\t\t}\n\t},\n\n\tglobal_hook(id, resolver)\n\t{\n\t\tif (!id)\n\t\t{\n\t\t\tthrow new Error(`You must specify global hook id`)\n\t\t}\n\n\t\tif (path.extname(`test.${id}`) !== `.${id}`)\n\t\t{\n\t\t\tthrow new Error(`Invalid global hook id \"${id}\". Expected a valid file extension.`)\n\t\t}\n\n\t\t// check if the file extension is already occupied\n\t\tif (require_hacker.occupied_file_extensions.has(id))\n\t\t{\n\t\t\tthrow new Error(`File extension \"${id}\" is already occupied by require-hacker`)\n\t\t}\n\n\t\tvalidate.resolve(resolver)\n\t}\n}\n\n// Node.js inner API check\n/* istanbul ignore if */\nif (!Module._resolveFilename)\n{\n\tthrow new Error('Incompatilbe Node.js version detected: \"Module._resolveFilename\" function is missing. File an issue on GitHub.')\n}\n\n// Node.js inner API check\n/* istanbul ignore if */\nif (!Module._findPath)\n{\n\tthrow new Error('Incompatilbe Node.js version detected: \"Module._findPath\" function is missing. File an issue on GitHub.')\n}\n\n// the module in which the require() call originated\nlet require_caller\n\n// instrument Module._resolveFilename\n// https://github.com/nodejs/node/blob/master/lib/module.js#L322\n//\n// `arguments` would conflict with Babel, therefore `...parameters`\n//\n// const native_module = require('native_module')\nconst original_resolveFilename = Module._resolveFilename\nModule._resolveFilename = function(...parameters)\n{\n\tconst request = parameters[0]\n\tconst parent = parameters[1]\n\n\t// take note of the require() caller\n\t// (the module in which this require() call originated)\n\trequire_caller = parent\n\n\treturn original_resolveFilename.apply(this, parameters)\n}\n\n// instrument Module._findPath\n// https://github.com/nodejs/node/blob/master/lib/module.js#L335-L341\n//\n// `arguments` would conflict with Babel, therefore `...parameters`\n//\nconst original_findPath = Module._findPath\nModule._findPath = (...parameters) =>\n{\n\tconst request = parameters[0]\n\t// const paths = parameters[1]\n\n\t// preceeding resolvers\n\tif (require_hacker.global_hooks_enabled)\n\t{\n\t\tfor (let resolver of require_hacker.preceding_path_resolvers)\n\t\t{\n\t\t\tconst resolved_path = resolver(request, require_caller)\n\t\t\tif (exists(resolved_path))\n\t\t\t{\n\t\t\t\treturn resolved_path\n\t\t\t}\n\t\t}\n\t}\n\n\t// original Node.js loader\n\tconst filename = original_findPath.apply(undefined, parameters)\n\tif (filename !== false)\n\t{\n\t\treturn filename\n\t}\n\n\t// rest resolvers\n\tif (require_hacker.global_hooks_enabled)\n\t{\n\t\tfor (let resolver of require_hacker.path_resolvers)\n\t\t{\n\t\t\tconst resolved = resolver.resolve(request, require_caller)\n\t\t\tif (exists(resolved))\n\t\t\t{\n\t\t\t\treturn resolved\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false\n}\n\n// detect if it is a CommonJS module declaration\nfunction is_a_module_declaration(text)\n{\n\treturn text.indexOf('module.exports = ') === 0 ||\n\t\t/\\s+module\\.exports = .+/.test(text)\n}\n\nexport default require_hacker"]}