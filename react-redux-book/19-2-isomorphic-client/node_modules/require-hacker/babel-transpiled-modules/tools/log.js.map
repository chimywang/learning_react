{"version":3,"sources":["../../source/tools/log.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB,G;AAEpB,cAAY,QAAZ,EAAsB,OAAtB,EACA;AAAA;;AACC,OAAK,OAAL,GAAe,OAAf;;AAEA;AACA,OAAK,QAAL,SAAoB,QAApB;AACA;;AAED;;;;;yBAEA;AAAA,qCADQ,UACR;AADQ,cACR;AAAA;;AACC,WAAQ,GAAR,CAAY,KAAK,QAAjB,EAA2B,qBAAqB,UAArB,CAA3B;AACA;;AAED;;;;0BAEA;AACC,OAAI,KAAK,OAAL,CAAa,KAAjB,EACA;AAAA,uCAHQ,UAGR;AAHQ,eAGR;AAAA;;AACC,YAAQ,GAAR,CAAY,KAAK,QAAjB,EAA2B,SAA3B,EAAsC,qBAAqB,UAArB,CAAtC;AACA;AACD;;AAED;;;;0BAEA;AACC,OAAI,KAAK,OAAL,CAAa,KAAjB,EACA;AAAA,uCAHQ,UAGR;AAHQ,eAGR;AAAA;;AACC,YAAQ,GAAR,CAAY,eAAO,IAAP,CAAY,KAAK,QAAjB,EAA2B,SAA3B,EAAsC,qBAAqB,UAArB,CAAtC,CAAZ;AACA;AACD;;AAED;;;;4BAEA;AAAA,sCADW,UACX;AADW,cACX;AAAA;;AACC,WAAQ,GAAR,CAAY,eAAO,MAAP,CAAc,KAAK,QAAnB,EAA6B,WAA7B,EAA0C,qBAAqB,UAArB,CAA1C,CAAZ;AACA;;AAED;;;;0BAEA;AAAA,sCADS,UACT;AADS,cACT;AAAA;;AACC,WAAQ,GAAR,CAAY,eAAO,GAAP,CAAW,KAAK,QAAhB,EAA0B,SAA1B,EAAqC,qBAAqB,UAArB,CAArC,CAAZ;AACA;;;;;AAGF;;;kBA/CqB,G;AAgDrB,SAAS,oBAAT,CAA8B,UAA9B,EACA;AACC;AACA,QAAO,WAAW,GAAX,CAAe,oBACtB;AACC;AACA,MAAI,QAAO,QAAP,uDAAO,QAAP,OAAoB,QAAxB,EACA;AACC;AACA,OAAI,oBAAoB,KAAxB,EACA;AACC,WAAO,SAAS,KAAhB;AACA;AACD;AACA,UAAO,yBAAe,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAP;AACA;AACD;AACA,MAAI,OAAO,QAAP,KAAoB,WAAxB,EACA;AACC,UAAO,aAAP;AACA;AACD;AACA,SAAO,SAAS,QAAT,EAAP;AACA,EApBM;AAqBP;AArBO,EAsBN,MAtBM,CAsBC,UAAC,OAAD,EAAU,QAAV,EACR;AACC,MAAI,QAAQ,MAAR,GAAiB,CAArB,EACA;AACC,cAAW,GAAX;AACA;AACD,SAAO,UAAU,QAAjB;AACA,EA7BM,EA8BP,EA9BO,CAAP;AA+BA","file":"log.js","sourcesContent":["import colors from 'colors/safe'\r\n\r\nexport default class Log\r\n{\r\n\tconstructor(preamble, options)\r\n\t{\r\n\t\tthis.options = options\r\n\r\n\t\t// is prepended to console output\r\n\t\tthis.preamble = `[${preamble}]`\r\n\t}\r\n\r\n\t// outputs info to the log\r\n\tinfo(...parameters)\r\n\t{\r\n\t\tconsole.log(this.preamble, generate_log_message(parameters))\r\n\t}\r\n\r\n\t// outputs debugging info to the log\r\n\tdebug(...parameters)\r\n\t{\r\n\t\tif (this.options.debug)\r\n\t\t{\r\n\t\t\tconsole.log(this.preamble, '[debug]', generate_log_message(parameters))\r\n\t\t}\r\n\t}\r\n\r\n\t// outputs minor debugging info to the log\r\n\ttrace(...parameters)\r\n\t{\r\n\t\tif (this.options.debug)\r\n\t\t{\r\n\t\t\tconsole.log(colors.gray(this.preamble, '[trace]', generate_log_message(parameters)))\r\n\t\t}\r\n\t}\r\n\r\n\t// outputs a warning to the log\r\n\twarning(...parameters)\r\n\t{\r\n\t\tconsole.log(colors.yellow(this.preamble, '[warning]', generate_log_message(parameters)))\r\n\t}\r\n\r\n\t// outputs an error to the log\r\n\terror(...parameters)\r\n\t{\r\n\t\tconsole.log(colors.red(this.preamble, '[error]', generate_log_message(parameters)))\r\n\t}\r\n}\r\n\r\n// transforms arguments to text\r\nfunction generate_log_message(parameters)\r\n{\r\n\t// преобразовать все аргументы функции в текстовый вид\r\n\treturn parameters.map(argument =>\r\n\t{\r\n\t\t// преобразование объектов в строку\r\n\t\tif (typeof argument === 'object')\r\n\t\t{\r\n\t\t\t// для ошибок - распечатывать стек вызовов\r\n\t\t\tif (argument instanceof Error)\r\n\t\t\t{\r\n\t\t\t\treturn argument.stack\r\n\t\t\t}\r\n\t\t\t// для остальных объектов вызывать JSON.stringify()\r\n\t\t\treturn JSON.stringify(argument, null, 2)\r\n\t\t}\r\n\t\t// если undefined\r\n\t\tif (typeof argument === 'undefined')\r\n\t\t{\r\n\t\t\treturn '[undefined]'\r\n\t\t}\r\n\t\t// прочие переменные - просто .toString()\r\n\t\treturn argument.toString()\r\n\t})\r\n\t// собрать всё это в одну строку через пробел\r\n\t.reduce((message, argument) =>\r\n\t{\r\n\t\tif (message.length > 0)\r\n\t\t{\r\n\t\t\tmessage += ' '\r\n\t\t}\r\n\t\treturn message + argument\r\n\t},\r\n\t'')\r\n}"]}