{"version":3,"sources":["../source/helpers.js"],"names":["is_object","extend","merge","clone","convert_from_camel_case","replace_all","starts_with","ends_with","is_empty","not_empty","repeat","is_blank","zip","last","camel_case","alias_properties_with_camel_case","exists","what","object_constructor","constructor","object","objects","filter","x","length","to","from","pop","intermediary_result","apply","key","Array","isArray","concat","parameters","prototype","slice","call","arguments","unshift","map","test","lo_dashed_key","replace","match","group_1","toLowerCase","escape_regexp","string","specials","RegExp","where","with_what","regexp","substring","j","i","array","times","result","text","a","b","_","index","nameParts","split","reduce","reduced","current","charAt","toUpperCase","is_private_property","name"],"mappings":"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","file":"helpers.js","sourcesContent":["// // if the variable is defined\r\nexport const exists = what => typeof what !== 'undefined'\r\n\r\n// used for JSON object type checking\r\nconst object_constructor = {}.constructor\r\n\r\n// detects a JSON object\r\nexport function is_object(object)\r\n{\r\n\treturn exists(object) && (object !== null) && object.constructor === object_constructor\r\n}\r\n\r\n// extends the first object with \r\n/* istanbul ignore next: some weird transpiled code, not testable */\r\nexport function extend(...objects)\r\n{\r\n\tobjects = objects.filter(x => exists(x))\r\n\r\n\tif (objects.length === 0)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\t\r\n\tif (objects.length === 1)\r\n\t{\r\n\t\treturn objects[0]\r\n\t}\r\n\r\n\tconst to   = objects[0]\r\n\tconst from = objects[1]\r\n\r\n\tif (objects.length > 2)\r\n\t{\r\n\t\tconst last = objects.pop()\r\n\t\tconst intermediary_result = extend.apply(this, objects)\r\n\t\treturn extend(intermediary_result, last)\r\n\t}\r\n\r\n\tfor (let key of Object.keys(from))\r\n\t{\r\n\t\tif (is_object(from[key]))\r\n\t\t{\r\n\t\t\tif (!is_object(to[key]))\r\n\t\t\t{\r\n\t\t\t\tto[key] = {}\r\n\t\t\t}\r\n\r\n\t\t\textend(to[key], from[key])\r\n\t\t}\r\n\t\telse if (Array.isArray(from[key]))\r\n\t\t{\r\n\t\t\tif (!Array.isArray(to[key]))\r\n\t\t\t{\r\n\t\t\t\tto[key] = []\r\n\t\t\t}\r\n\r\n\t\t\tto[key] = to[key].concat(clone(from[key]))\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tto[key] = from[key]\r\n\t\t}\r\n\t}\r\n\r\n\treturn to\r\n}\r\n\r\nexport function merge()\r\n{\r\n\tconst parameters = Array.prototype.slice.call(arguments, 0)\r\n\tparameters.unshift({})\r\n\treturn extend.apply(this, parameters)\r\n}\r\n\r\nexport function clone(object)\r\n{\r\n\tif (is_object(object))\r\n\t{\r\n\t\treturn merge({}, object)\r\n\t}\r\n\telse if (Array.isArray(object))\r\n\t{\r\n\t\treturn object.map(x => clone(x))\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn object\r\n\t}\r\n}\r\n\r\n// converts all camelCased keys of an object to lodash style\r\nexport function convert_from_camel_case(object)\r\n{\r\n\tfor (let key of Object.keys(object))\r\n\t{\r\n\t\tif (/[A-Z]/.test(key))\r\n\t\t{\r\n\t\t\tconst lo_dashed_key = key.replace(/([A-Z])/g, function(match, group_1)\r\n\t\t\t{\r\n\t\t\t\treturn '_' + group_1.toLowerCase()\r\n\t\t\t})\r\n\r\n\t\t\tif (!exists(object[lo_dashed_key]))\r\n\t\t\t{\r\n\t\t\t\tobject[lo_dashed_key] = object[key]\r\n\t\t\t\tdelete object[key]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn object\r\n}\r\n\r\nfunction escape_regexp(string)\r\n{\r\n\tconst specials = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\]\", 'g')\r\n\treturn string.replace(specials, \"\\\\$&\")\r\n}\r\n\r\nexport function replace_all(where, what, with_what)\r\n{\r\n\tconst regexp = new RegExp(escape_regexp(what), 'g')\r\n\treturn where.replace(regexp, with_what)\r\n}\r\n\r\nexport function starts_with(string, substring)\r\n{\r\n\tlet j = substring.length\r\n\r\n\tif (j > string.length)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\twhile (j > 0)\r\n\t{\r\n\t\tj--\r\n\r\n\t\tif (string[j] !== substring[j])\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nexport function ends_with(string, substring)\r\n{\r\n\tlet i = string.length\r\n\tlet j = substring.length\r\n\r\n\tif (j > i)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\twhile (j > 0)\r\n\t{\r\n\t\ti--\r\n\t\tj--\r\n\r\n\t\tif (string[i] !== substring[j])\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n\r\n\t// const index = string.lastIndexOf(substring)\r\n\t// return index >= 0 && index === string.length - substring.length\r\n}\r\n\r\nexport function is_empty(array)\r\n{\r\n\treturn array.length === 0\r\n}\r\n\r\nexport function not_empty(array)\r\n{\r\n\treturn array.length > 0\r\n}\r\n\r\n// repeat string N times\r\nexport function repeat(what, times)\r\n{\r\n\tlet result = ''\r\n\twhile (times > 0)\r\n\t{\r\n\t\tresult += what\r\n\t\ttimes--\r\n\t}\r\n\treturn result\r\n}\r\n\r\n// if the text is blank\r\nexport function is_blank(text)\r\n{\r\n\treturn !exists(text) || !text.replace(/\\s/g, '')\r\n}\r\n\r\n// zips two arrays\r\nexport function zip(a, b)\r\n{\r\n\treturn a.map(function(_, index) \r\n\t{\r\n\t\treturn [a[index], b[index]]\r\n\t})\r\n}\r\n\r\n// last element of an array\r\nexport function last(array)\r\n{\r\n\treturn array[array.length - 1]\r\n}\r\n\r\n/**\r\n * Returns a camel case variant of the string, unless it's in TitleCase.\r\n * @param {string} string\r\n */\r\nexport function camel_case(string)\r\n{\r\n\tconst nameParts = string.split('_')\r\n\treturn nameParts.slice(1).reduce((reduced, current) =>\r\n\t{\r\n\t\treturn reduced + current.charAt(0).toUpperCase() + current.slice(1)\r\n\t},\r\n\tnameParts[0])\r\n}\r\n\r\n// detects \"private\" object properties (just in case there are any)\r\nconst is_private_property = name => starts_with(name, '__')\r\n\r\n/**\r\n * Creates camel case variants of the attributes on the object\r\n * @param {object} object\r\n */\r\nexport function alias_properties_with_camel_case(object)\r\n{\r\n\tfor (let key of Object.keys(object).filter(key => !is_private_property(key)))\r\n\t{\r\n\t\tobject[camel_case(key)] = object[key]\r\n\t}\r\n}\r\n"]}