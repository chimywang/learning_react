'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.load = load;
exports.loadSuccess = loadSuccess;
exports.loadFail = loadFail;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LOAD = '@async/LOAD';
var LOAD_SUCCESS = '@async/LOAD_SUCCESS';
var LOAD_FAIL = '@async/LOAD_FAIL';

function load(key) {
  return { type: LOAD, payload: { key: key } };
}
function loadSuccess(key, data) {
  return { type: LOAD_SUCCESS, payload: { key: key, data: data } };
}
function loadFail(key, error) {
  return { type: LOAD_FAIL, payload: { key: key, error: error } };
}

var initialState = exports.initialState = {
  loadingNumber: 0,
  loadState: {}
};

function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  switch (action.type) {
    case LOAD:
      return _extends({}, state, {
        loadingNumber: state.loadingNumber + 1,
        loadState: _extends({}, state.loadState, _defineProperty({}, action.payload.key, {
          loading: true,
          loaded: false
        }))
      });
    case LOAD_SUCCESS:
      return _extends({}, state, _defineProperty({
        loadingNumber: state.loadingNumber - 1,
        loadState: _extends({}, state.loadState, _defineProperty({}, action.payload.key, {
          loading: false,
          loaded: true,
          error: null
        }))
      }, action.payload.key, action.payload.data));
    case LOAD_FAIL:
      return _extends({}, state, {
        loadingNumber: state.loadingNumber - 1,
        loadState: _extends({}, state.loadState, _defineProperty({}, action.payload.key, {
          loading: false,
          loaded: false,
          error: action.payload.error
        }))
      });
    default:
      return state;
  }
}

exports.default = function (reducers) {
  var reducerKeys = Object.keys(reducers || {});
  return function (state, action) {
    var asyncState = reducer(state, action);
    var otherState = {};
    for (var i = 0; i < reducerKeys.length; i += 1) {
      var key = reducerKeys[i];
      if (typeof reducers[key] === 'function') {
        otherState[key] = reducers[key](asyncState[key], action);
      }
    }
    return _extends({}, asyncState, otherState);
  };
};